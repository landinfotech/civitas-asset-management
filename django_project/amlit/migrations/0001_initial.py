# Generated by Django 2.2.15 on 2020-08-18 08:33

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AssetClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'asset_class',
            },
        ),
        migrations.CreateModel(
            name='AssetSubClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'asset_sub_class',
            },
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(help_text='Geometry of Box.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Box', max_length=256, null=True)),
            ],
            options={
                'db_table': 'box',
            },
        ),
        migrations.CreateModel(
            name='ChamberType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'chamber_type',
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'configuration',
            },
        ),
        migrations.CreateModel(
            name='Control',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'control',
            },
        ),
        migrations.CreateModel(
            name='FeatureCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('asset_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.AssetClass')),
                ('asset_sub_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.AssetSubClass')),
            ],
            options={
                'db_table': 'feature_code',
            },
        ),
        migrations.CreateModel(
            name='HydrantType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'hydrant_type',
            },
        ),
        migrations.CreateModel(
            name='MeterPID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'meter_pid',
            },
        ),
        migrations.CreateModel(
            name='MeterReadingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'meter_reading_type',
            },
        ),
        migrations.CreateModel(
            name='MeterType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'meter_type',
            },
        ),
        migrations.CreateModel(
            name='Motor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of motor.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of motor', max_length=256, null=True)),
                ('output_hp', models.FloatField(blank=True, help_text='Output HP of motor (SI system)', null=True)),
                ('output_power', models.FloatField(blank=True, help_text='Output HP of motor (SI system)', null=True)),
                ('control', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Control')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
            ],
            options={
                'db_table': 'motor',
            },
        ),
        migrations.CreateModel(
            name='MotorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'motor_type',
            },
        ),
        migrations.CreateModel(
            name='PartType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'part_type',
            },
        ),
        migrations.CreateModel(
            name='PipeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pipe_type',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'province',
            },
        ),
        migrations.CreateModel(
            name='PumpType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pump_type',
            },
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'source_type',
            },
        ),
        migrations.CreateModel(
            name='TankType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tank_type',
            },
        ),
        migrations.CreateModel(
            name='TreatmentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'treatment_type',
            },
        ),
        migrations.CreateModel(
            name='ValveActuationDirection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'valve_actuation_direction',
            },
        ),
        migrations.CreateModel(
            name='ValveActuationSpec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'valve_actuation_spec',
            },
        ),
        migrations.CreateModel(
            name='ValveActuationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'valve_actuation_type',
            },
        ),
        migrations.CreateModel(
            name='ValveType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'valve_type',
            },
        ),
        migrations.CreateModel(
            name='WaterGeneralBrand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'water_general_brand',
            },
        ),
        migrations.CreateModel(
            name='WaterGeneralMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'water_general_material',
            },
        ),
        migrations.CreateModel(
            name='Valve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of Valve.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Valve', max_length=256, null=True)),
                ('diameter', models.FloatField(blank=True, help_text='Diameter of valve (SI system)', null=True)),
                ('depth', models.FloatField(blank=True, help_text='Depth of valve (SI system)', null=True)),
                ('actuation_direction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.ValveActuationDirection')),
                ('actuation_spec', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.ValveActuationSpec')),
                ('actuation_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.ValveActuationType')),
                ('box', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Box')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.ValveType')),
            ],
            options={
                'db_table': 'valve',
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(help_text='Geometry of tank.', srid=4326)),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.TreatmentType')),
            ],
            options={
                'db_table': 'treatment',
            },
        ),
        migrations.CreateModel(
            name='Tank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(help_text='Geometry of tank.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of tank', max_length=256, null=True)),
                ('capacity', models.FloatField(blank=True, help_text='Capacity of tank (SI system)', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.TankType')),
            ],
            options={
                'db_table': 'tank',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(help_text='Geometry of source.', srid=4326)),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.SourceType')),
            ],
            options={
                'db_table': 'source',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('province', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.Province')),
            ],
            options={
                'db_table': 'region',
            },
        ),
        migrations.CreateModel(
            name='PumpSubType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.PumpType')),
            ],
            options={
                'db_table': 'pump_sub_type',
            },
        ),
        migrations.CreateModel(
            name='Pump',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of pump.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of pump', max_length=256, null=True)),
                ('submerged', models.BooleanField(blank=True, help_text='Pump is submerged', null=True)),
                ('capacity', models.FloatField(blank=True, help_text='Capacity of pump (SI system)', null=True)),
                ('head', models.FloatField(blank=True, help_text='Head of pump (SI system)', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('motor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Motor')),
                ('subtype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.PumpSubType')),
            ],
            options={
                'db_table': 'pump',
            },
        ),
        migrations.CreateModel(
            name='Pipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.LineStringField(help_text='Geometry of Pipe.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Pipe', max_length=256, null=True)),
                ('diameter', models.FloatField(blank=True, help_text='Depth of pipe (SI system)', null=True)),
                ('depth', models.FloatField(blank=True, help_text='Depth of pipe (SI system)', null=True)),
                ('length', models.FloatField(blank=True, help_text='Length of pipe (SI system)', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralMaterial')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.PipeType')),
            ],
            options={
                'db_table': 'pipe',
            },
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of Part.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Part', max_length=256, null=True)),
                ('depth', models.FloatField(blank=True, help_text='Depth of part (SI system)', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralMaterial')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.PartType')),
            ],
            options={
                'db_table': 'part',
            },
        ),
        migrations.AddField(
            model_name='motor',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.MotorType'),
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of Meter.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Meter', max_length=256, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('pid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.MeterPID')),
                ('reading_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.MeterReadingType')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.MeterType')),
            ],
            options={
                'db_table': 'meter',
            },
        ),
        migrations.CreateModel(
            name='Hydrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of tank.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of hydrant', max_length=256, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.HydrantType')),
            ],
            options={
                'db_table': 'hydrant',
            },
        ),
        migrations.AddField(
            model_name='control',
            name='feature_code',
            field=models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode'),
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.Region')),
            ],
            options={
                'db_table': 'community',
            },
        ),
        migrations.CreateModel(
            name='Chamber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of Chamber.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Chamber', max_length=256, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand')),
                ('feature_code', models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.ChamberType')),
            ],
            options={
                'db_table': 'chamber',
            },
        ),
        migrations.AddField(
            model_name='box',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralBrand'),
        ),
        migrations.AddField(
            model_name='box',
            name='feature_code',
            field=models.ForeignKey(limit_choices_to={'asset_class__name': 'PWS'}, on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureCode'),
        ),
        migrations.AddField(
            model_name='box',
            name='material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.WaterGeneralMaterial'),
        ),
        migrations.AddField(
            model_name='assetclass',
            name='sub_classes',
            field=models.ManyToManyField(blank=True, to='amlit.AssetSubClass'),
        ),
    ]

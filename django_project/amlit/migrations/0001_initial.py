# Generated by Django 2.2.15 on 2020-09-03 10:11

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(help_text='Geometry of Box.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Box', max_length=256, null=True)),
            ],
            options={
                'db_table': 'box',
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'community',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'condition',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'configuration',
            },
        ),
        migrations.CreateModel(
            name='Control',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'control',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('code', models.CharField(max_length=512)),
            ],
            options={
                'db_table': 'currency',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Deterioration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('equation', models.CharField(max_length=512)),
            ],
            options={
                'db_table': 'deterioration',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FeatureClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'feature_class',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FeatureCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'feature_code',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FeatureSubClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('deterioration', models.ForeignKey(blank=True, help_text='Deterioration of this sub class', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Deterioration')),
                ('the_class', models.ForeignKey(db_column='class', on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureClass', verbose_name='class')),
            ],
            options={
                'db_table': 'feature_sub_class',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FeatureSubType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'asset_sub_type',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FeatureType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('lifespan', models.FloatField(blank=True, help_text='Total estimated life span of asset in years', null=True)),
            ],
            options={
                'db_table': 'asset_type',
                'ordering': ('sub_class__the_class', 'sub_class', 'name'),
            },
        ),
        migrations.CreateModel(
            name='GeneralBrand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'general_brand',
            },
        ),
        migrations.CreateModel(
            name='GeneralMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'general_material',
            },
        ),
        migrations.CreateModel(
            name='MeterPID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'meter_pid',
            },
        ),
        migrations.CreateModel(
            name='MeterReadingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'meter_reading_type',
            },
        ),
        migrations.CreateModel(
            name='Motor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of motor.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of motor', max_length=256, null=True)),
                ('output_hp', models.FloatField(blank=True, help_text='Output HP of motor (SI system)', null=True)),
                ('output_power', models.FloatField(blank=True, help_text='Output HP of motor (SI system)', null=True)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('control', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Control')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
            ],
            options={
                'db_table': 'motor',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'province',
            },
        ),
        migrations.CreateModel(
            name='Quantity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
            ],
            options={
                'db_table': 'quantity',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('community', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Community')),
            ],
            options={
                'db_table': 'system',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'unit',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ValveActuationDirection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'valve_actuation_direction',
            },
        ),
        migrations.CreateModel(
            name='ValveActuationSpec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'valve_actuation_spec',
            },
        ),
        migrations.CreateModel(
            name='ValveActuationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'valve_actuation_type',
            },
        ),
        migrations.CreateModel(
            name='Valve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of Valve.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Valve', max_length=256, null=True)),
                ('diameter', models.FloatField(blank=True, help_text='Diameter of valve (SI system)', null=True)),
                ('depth', models.FloatField(blank=True, help_text='Depth of valve (SI system)', null=True)),
                ('actuation_direction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.ValveActuationDirection')),
                ('actuation_spec', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.ValveActuationSpec')),
                ('actuation_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.ValveActuationType')),
                ('box', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Box')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand')),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'valve',
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(help_text='Geometry of tank.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'treatment',
            },
        ),
        migrations.CreateModel(
            name='Tank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(help_text='Geometry of tank.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of tank', max_length=256, null=True)),
                ('capacity', models.FloatField(blank=True, help_text='Capacity of tank (SI system)', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand')),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'tank',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(help_text='Geometry of source.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'source',
            },
        ),
        migrations.CreateModel(
            name='Retention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(help_text='Geometry of Retention.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'retention',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('province', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.Province')),
            ],
            options={
                'db_table': 'region',
            },
        ),
        migrations.AddField(
            model_name='quantity',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Unit'),
        ),
        migrations.CreateModel(
            name='Pump',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of pump.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of pump', max_length=256, null=True)),
                ('submerged', models.BooleanField(blank=True, help_text='Pump is submerged', null=True)),
                ('capacity', models.FloatField(blank=True, help_text='Capacity of pump (SI system)', null=True)),
                ('head', models.FloatField(blank=True, help_text='Head of pump (SI system)', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand')),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('motor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Motor')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'pump',
            },
        ),
        migrations.CreateModel(
            name='Pipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.LineStringField(help_text='Geometry of Pipe.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Pipe', max_length=256, null=True)),
                ('diameter', models.FloatField(blank=True, help_text='Depth of pipe (SI system)', null=True)),
                ('depth', models.FloatField(blank=True, help_text='Depth of pipe (SI system)', null=True)),
                ('length', models.FloatField(blank=True, help_text='Length of pipe (SI system)', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand')),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralMaterial')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'pipe',
            },
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of Part.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Part', max_length=256, null=True)),
                ('depth', models.FloatField(blank=True, help_text='Depth of part (SI system)', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand')),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralMaterial')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'part',
            },
        ),
        migrations.AddField(
            model_name='motor',
            name='quantity',
            field=models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity'),
        ),
        migrations.AddField(
            model_name='motor',
            name='sub_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType'),
        ),
        migrations.AddField(
            model_name='motor',
            name='system',
            field=models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System'),
        ),
        migrations.AddField(
            model_name='motor',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType'),
        ),
        migrations.CreateModel(
            name='Money',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Currency')),
            ],
            options={
                'db_table': 'money',
            },
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of Meter.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Meter', max_length=256, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand')),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('pid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.MeterPID')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('reading_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.MeterReadingType')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'meter',
            },
        ),
        migrations.CreateModel(
            name='ManholeTrunk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of ManholeTrunk.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'manhole_trunk',
            },
        ),
        migrations.CreateModel(
            name='ManholeCover',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of ManholeCover.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('trunk', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='amlit.ManholeTrunk')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'manhole_cover',
            },
        ),
        migrations.CreateModel(
            name='Hydrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of tank.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of hydrant', max_length=256, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand')),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'hydrant',
            },
        ),
        migrations.AddField(
            model_name='featuretype',
            name='maintenance_cost',
            field=models.OneToOneField(blank=True, help_text='Annual operation and maintenance cost (Default in canadian dollars)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='type_maintenance_cost', to='amlit.Money'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='renewal_cost',
            field=models.OneToOneField(blank=True, help_text='Renewal cost (Default in canadian dollars)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='type_renewal_cost', to='amlit.Money'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='sub_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureSubClass'),
        ),
        migrations.AddField(
            model_name='featuresubtype',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType'),
        ),
        migrations.AddField(
            model_name='featuresubclass',
            name='unit',
            field=models.ForeignKey(blank=True, help_text='Default unit for this sub_class', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Unit'),
        ),
        migrations.AddField(
            model_name='featurecode',
            name='sub_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureSubClass'),
        ),
        migrations.CreateModel(
            name='Ditch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(help_text='Geometry of Ditch.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'ditch',
            },
        ),
        migrations.CreateModel(
            name='Detention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(help_text='Geometry of Detention.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'detention',
            },
        ),
        migrations.AddField(
            model_name='control',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand'),
        ),
        migrations.AddField(
            model_name='control',
            name='condition',
            field=models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition'),
        ),
        migrations.AddField(
            model_name='control',
            name='feature_code',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode'),
        ),
        migrations.AddField(
            model_name='control',
            name='quantity',
            field=models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity'),
        ),
        migrations.AddField(
            model_name='control',
            name='sub_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType'),
        ),
        migrations.AddField(
            model_name='control',
            name='system',
            field=models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System'),
        ),
        migrations.AddField(
            model_name='control',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType'),
        ),
        migrations.AddField(
            model_name='community',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.Region'),
        ),
        migrations.CreateModel(
            name='Chamber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of Chamber.', srid=4326)),
                ('model', models.CharField(blank=True, help_text='Model of Chamber', max_length=256, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand')),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'chamber',
            },
        ),
        migrations.CreateModel(
            name='CatchbasinTrunk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of CatchbasinGrate.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'catchbasin_trunk',
            },
        ),
        migrations.CreateModel(
            name='CatchbasinGrate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='unique asset ID', max_length=256, null=True)),
                ('date_installed', models.DateField(help_text='When this feature is installed')),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Geometry of CatchbasinGrate.', srid=4326)),
                ('condition', models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition')),
                ('feature_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode')),
                ('quantity', models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType')),
                ('system', models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System')),
                ('trunk', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='amlit.CatchbasinTrunk')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType')),
            ],
            options={
                'db_table': 'catchbasin_grate',
            },
        ),
        migrations.AddField(
            model_name='box',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralBrand'),
        ),
        migrations.AddField(
            model_name='box',
            name='condition',
            field=models.ForeignKey(blank=True, help_text='Condition of the feature', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.Condition'),
        ),
        migrations.AddField(
            model_name='box',
            name='feature_code',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureCode'),
        ),
        migrations.AddField(
            model_name='box',
            name='material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.GeneralMaterial'),
        ),
        migrations.AddField(
            model_name='box',
            name='quantity',
            field=models.OneToOneField(help_text='Quantity of the feature', on_delete=django.db.models.deletion.CASCADE, to='amlit.Quantity'),
        ),
        migrations.AddField(
            model_name='box',
            name='sub_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.FeatureSubType'),
        ),
        migrations.AddField(
            model_name='box',
            name='system',
            field=models.ForeignKey(blank=True, help_text='What system the feature belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='amlit.System'),
        ),
        migrations.AddField(
            model_name='box',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='amlit.FeatureType'),
        ),
    ]
